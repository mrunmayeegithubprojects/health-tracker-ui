/* ðŸŒ¸ Dusty Lavender Navigation Tabs */
.navbar {
  display: flex;
  flex-wrap: wrap;
  gap: 12px;
  margin-bottom: 20px;
  justify-content: flex-start;
}

/* Default tab look */
.navbar a {
  text-decoration: none;
  padding: 12px 20px;
  border: 2px solid #c4b5fd;           /* dusty lavender */
  border-radius: 8px;
  color: #7c3aed;                      /* rich lavender text */
  font-weight: 600;
  font-size: 1.25rem;
  transition: all 0.2s ease-in-out;
  background-color: #f5f3ff;           /* very soft background */
}

/* Hover effect */
.navbar a:hover {
  background-color: #ede9fe;
  transform: translateY(-1px);
}

/* Active tab */
.navbar a.active {
  background-color: #c4b5fd;
  color: white;
  border-color: #c4b5fd;
  font-weight: 700;
}

/* ðŸ“± Mobile optimization */
@media (max-width: 480px) {
  .navbar a {
    font-size: 1.4rem;
    padding: 14px 18px;
    flex-grow: 1;
    text-align: center;
  }
}
.users-wrapper {
  max-width: 600px;
  margin: 0 auto;
  padding: 24px 16px;
}

.users-heading {
  font-size: 2.4rem;
  font-weight: bold;
  color: #1a237e;
  text-align: center;
  margin-bottom: 24px;
}

.user-form {
  background-color: #f3e8ff;
  border-radius: 12px;
  padding: 20px;
  margin-bottom: 32px;
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.user-input {
  padding: 12px;
  font-size: 1.1rem;
  border: 1px solid #c4b5fd;
  border-radius: 6px;
}

.user-button {
  background-color: #7c3aed;
  color: white;
  padding: 12px;
  font-size: 1.1rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
}

.user-button:hover {
  background-color: #6d28d9;
}

.user-list {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.user-card {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: white;
  border: 1px solid #e5e7eb;
  padding: 16px;
  border-radius: 10px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.06);
}

.user-name {
  font-size: 1.2rem;
  font-weight: 600;
  color: #1a237e;
}

.user-email {
  font-size: 1rem;
  color: #555;
}

.delete-button {
  background-color: #ef4444;
  color: white;
  padding: 8px 16px;
  font-size: 0.9rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
}

.delete-button:hover {
  background-color: #dc2626;
}
.parameters-wrapper {
  max-width: 600px;
  margin: 0 auto;
  padding: 24px 16px;
}

.parameters-heading {
  font-size: 2.4rem;
  font-weight: bold;
  color: #4b0082;
  text-align: center;
  margin-bottom: 24px;
}

.parameter-form {
  background-color: #f3e8ff;
  border-radius: 12px;
  padding: 20px;
  margin-bottom: 32px;
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.parameter-input {
  padding: 12px;
  font-size: 1.1rem;
  border: 1px solid #c4b5fd;
  border-radius: 6px;
}

.parameter-button {
  background-color: #7c3aed;
  color: white;
  padding: 12px;
  font-size: 1.1rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
}

.parameter-button:hover {
  background-color: #6d28d9;
}

.parameter-list {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.parameter-card {
  background-color: white;
  border: 1px solid #e5e7eb;
  border-radius: 10px;
  padding: 16px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.06);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.parameter-info {
  display: flex;
  flex-direction: column;
}

.parameter-name {
  font-size: 1.2rem;
  font-weight: 600;
  color: #1a237e;
}

.parameter-meta {
  font-size: 0.95rem;
  color: #666;
}

.parameter-actions {
  display: flex;
  gap: 8px;
}

.edit-button {
  background-color: #facc15;
  color: black;
  padding: 8px 14px;
  border-radius: 6px;
  border: none;
  font-size: 0.9rem;
  cursor: pointer;
}

.edit-button:hover {
  background-color: #eab308;
}

.delete-button {
  background-color: #ef4444;
  color: white;
  padding: 8px 14px;
  border-radius: 6px;
  border: none;
  font-size: 0.9rem;
  cursor: pointer;
}

.delete-button:hover {
  background-color: #dc2626;
}
import React, { useEffect, useState } from "react";
import axios from "axios";
import { API_BASE_URL } from "../config";

export default function UserParameters() {
  const [users, setUsers] = useState([]);
  const [parameters, setParameters] = useState([]);
  const [selectedUser, setSelectedUser] = useState(null);
  const [selectedParams, setSelectedParams] = useState([]);
  const [userParams, setUserParams] = useState([]);

  useEffect(() => {
    axios.get(`${API_BASE_URL}/api/users`)
      .then((res) => setUsers(res.data))
      .catch((err) => console.error("Failed to fetch users", err));

    axios.get(`${API_BASE_URL}/api/parameters`)
      .then((res) => setParameters(res.data))
      .catch((err) => console.error("Failed to fetch parameters", err));
  }, []);

  useEffect(() => {
    if (selectedUser) {
      axios.get(`${API_BASE_URL}/api/userParameter/${selectedUser}`)
        .then((res) => {
          const paramList = res.data.parameterDTOList || [];
          setUserParams(paramList);
          setSelectedParams(paramList.map(p => p.paramId));
        })
        .catch((err) => console.error("Failed to fetch user parameters", err));
    } else {
      setUserParams([]);
      setSelectedParams([]);
    }
  }, [selectedUser]);

  const handleAssign = async () => {
    try {
      await axios.post(`${API_BASE_URL}/api/userParameter`, {
        userId: selectedUser,
        parameterIds: selectedParams
      });
      const res = await axios.get(`${API_BASE_URL}/api/userParameter/${selectedUser}`);
      setUserParams(res.data.parameterDTOList || []);
      alert("Parameters assigned successfully!");
    } catch (err) {
      console.error("Error assigning parameters", err);
      alert("Failed to assign parameters.");
    }
  };

  return (
    <div className="wrapper">
      <h2 className="main-heading">Assign Parameters</h2>

      {/* Select User */}
      <label className="label">Select a User:</label>
      <select
        value={selectedUser || ""}
        onChange={(e) => setSelectedUser(e.target.value)}
        className="input-field"
      >
        <option value="" disabled>Select User</option>
        {users.map(user => (
          <option key={user.userId} value={user.userId}>{user.name}</option>
        ))}
      </select>

      {/* Parameter Checkboxes */}
      <label className="label">Select Parameters:</label>
      <div className="checkbox-list">
        {parameters.map(param => (
          <label key={param.paramId} className="checkbox-item">
            <input
              type="checkbox"
              checked={selectedParams.includes(param.paramId)}
              onChange={(e) => {
                if (e.target.checked) {
                  setSelectedParams(prev => [...prev, param.paramId]);
                } else {
                  setSelectedParams(prev => prev.filter(id => id !== param.paramId));
                }
              }}
            />
            {param.paramName}
          </label>
        ))}
      </div>

      {/* Assign Button */}
      {selectedUser && (
        <button onClick={handleAssign} className="assign-btn">
          Assign Selected
        </button>
      )}

      {/* Assigned Params List */}
      {userParams.length > 0 && (
        <>
          <h3 className="sub-heading">Assigned Parameters:</h3>
          <ul className="assigned-list">
            {userParams.map(param => (
              <li key={param.paramId}>
                {param.paramName} ({param.trackingFrequency})
              </li>
            ))}
          </ul>
        </>
      )}
    </div>
  );
}
